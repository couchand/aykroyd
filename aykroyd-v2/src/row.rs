//! Traits and structs for handling result rows.

use super::Error;

/// A type that can be produced from a database column.
pub trait FromColumn<Row, Index>: Sized {
    fn get(row: Row, index: Index) -> Result<Self, Error>;
}

/// The columns of a result row by index.
pub struct ColumnsIndexed<'a, Row> {
    row: &'a Row,
    offset: usize,
}

impl<'a, Row> ColumnsIndexed<'a, Row> {
    pub fn new(row: &'a Row) -> Self {
        ColumnsIndexed { row, offset: 0 }
    }

    pub fn get<T>(&self, index: usize) -> Result<T, Error>
    where
        T: FromColumn<&'a Row, usize>,
    {
        FromColumn::get(self.row, self.offset + index)
    }

    pub fn child(&self, offset: usize) -> Self {
        let offset = self.offset + offset;
        ColumnsIndexed {
            row: self.row,
            offset,
        }
    }
}

/// The columns of a result row by name.
pub struct ColumnsNamed<'a, Row> {
    row: &'a Row,
    prefix: String,
}

impl<'a, Row> ColumnsNamed<'a, Row> {
    pub fn new(row: &'a Row) -> Self {
        ColumnsNamed {
            row,
            prefix: String::new(),
        }
    }

    pub fn get<T>(&self, index: &str) -> Result<T, Error>
    where
        T: for<'b> FromColumn<&'a Row, &'b str>,
    {
        let mut name = self.prefix.clone();
        name.push_str(index);
        FromColumn::get(self.row, name.as_ref())
    }

    pub fn child(&self, prefix: &str) -> Self {
        let prefix = {
            let mut s = self.prefix.clone();
            s.push_str(prefix);
            s
        };
        ColumnsNamed {
            row: self.row,
            prefix,
        }
    }
}

/// A type that can be produced from a result row by column index.
///
/// This is automatically generated by the `FromRow` derive macro
/// when one of the following is true:
///
/// - the type is a tuple struct without attributes
/// - one or more column has an attribute `#[aykroyd(index = <index>)]`
/// - the type has an attribute `#[aykroyd(indexed)]`
pub trait FromColumnsIndexed<Row>: Sized {
    //const NUM_COLUMNS: usize;
    fn from_columns(columns: ColumnsIndexed<Row>) -> Result<Self, Error>;
}

impl<Row, T: FromColumnsIndexed<Row>> FromColumnsIndexed<Row> for Option<T> {
    //const NUM_COLUMNS: usize = T::NUM_COLUMNS;
    fn from_columns(columns: ColumnsIndexed<Row>) -> Result<Self, Error> {
        T::from_columns(columns).map(Some).or(Ok(None)) // TODO: this is terrible!
    }
}

/// A type that can be produced from a result row by column name.
///
/// This is automatically generated by the `FromRow` derive macro
/// when one of the following is true:
///
/// - the type is a struct without attributes
/// - one or more column has an attribute `#[aykroyd(name = "<name>")]`
/// - the type has an attribute `#[aykroyd(named)]`
pub trait FromColumnsNamed<Row>: Sized {
    fn from_columns(columns: ColumnsNamed<Row>) -> Result<Self, Error>;
}

/// A type that can be produced from a database's result row.
///
/// Don't implement this directly, use the derive macro.
pub trait FromRow<Row>: Sized {
    fn from_row(row: &Row) -> Result<Self, Error>;
}
